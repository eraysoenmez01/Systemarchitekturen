
// Generated by Akka gRPC. DO NOT EDIT.
package at.fhv.sysarch.lab2.ordermanager;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcChannel;
import akka.grpc.GrpcClientCloseException;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static at.fhv.sysarch.lab2.ordermanager.OrderService.Serializers.*;

import scala.concurrent.ExecutionContext;

import akka.grpc.AkkaGrpcGenerated;


import akka.grpc.javadsl.SingleResponseRequestBuilder;


@AkkaGrpcGenerated
public abstract class OrderServiceClient extends OrderServiceClientPowerApi implements OrderService, AkkaGrpcClient {
  public static final OrderServiceClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultOrderServiceClient(akka.grpc.GrpcChannel$.MODULE$.apply(settings, sys), true, sys);
  }

  public static final OrderServiceClient create(GrpcChannel channel, ClassicActorSystemProvider sys) {
    return new DefaultOrderServiceClient(channel, false, sys);
  }

  @AkkaGrpcGenerated
  protected final static class DefaultOrderServiceClient extends OrderServiceClient {

      private final GrpcChannel channel;
      private final boolean isChannelOwned;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;
      private final MetadataImpl defaultMetadata;

      private DefaultOrderServiceClient(GrpcChannel channel, boolean isChannelOwned, ClassicActorSystemProvider sys) {
        this.channel = channel;
        this.isChannelOwned = isChannelOwned;
        this.settings = channel.settings();
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.options = NettyClientUtils.callOptions(settings);
        this.defaultMetadata = MetadataImpl.empty();

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

      private DefaultOrderServiceClient(GrpcChannel channel, boolean isChannelOwned, GrpcClientSettings settings, io.grpc.CallOptions options, Materializer mat, ExecutionContext ec, MetadataImpl defaultMetadata) {
        this.channel = channel;
        this.isChannelOwned = isChannelOwned;
        this.settings = settings;
        this.options = options;
        this.mat = mat;
        this.ec = ec;
        this.defaultMetadata = defaultMetadata;
      }

  
    
      
        private final SingleResponseRequestBuilder<at.fhv.sysarch.lab2.ordermanager.Order.OrderRequest, at.fhv.sysarch.lab2.ordermanager.Order.OrderReply> placeOrderRequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaUnaryRequestBuilder<>(placeOrderDescriptor, channel, options, settings, defaultMetadata, ec);
        }
      
    
  

      

        /**
         * For access to method metadata use the parameterless version of placeOrder
         */
        public java.util.concurrent.CompletionStage<at.fhv.sysarch.lab2.ordermanager.Order.OrderReply> placeOrder(at.fhv.sysarch.lab2.ordermanager.Order.OrderRequest request) {
          return placeOrder().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer placeOrder(at.fhv.sysarch.lab2.ordermanager.Order.OrderRequest) if possible.
         */
        
          
            public SingleResponseRequestBuilder<at.fhv.sysarch.lab2.ordermanager.Order.OrderRequest, at.fhv.sysarch.lab2.ordermanager.Order.OrderReply> placeOrder()
          
        
        {
          return placeOrderRequestBuilder(channel.internalChannel());
        }
      

      
        private static MethodDescriptor<at.fhv.sysarch.lab2.ordermanager.Order.OrderRequest, at.fhv.sysarch.lab2.ordermanager.Order.OrderReply> placeOrderDescriptor =
          MethodDescriptor.<at.fhv.sysarch.lab2.ordermanager.Order.OrderRequest, at.fhv.sysarch.lab2.ordermanager.Order.OrderReply>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("at.fhv.sysarch.lab2.ordermanager.OrderService", "PlaceOrder"))
            .setRequestMarshaller(new ProtoMarshaller<at.fhv.sysarch.lab2.ordermanager.Order.OrderRequest>(OrderRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<at.fhv.sysarch.lab2.ordermanager.Order.OrderReply>(OrderReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        if (isChannelOwned) {
          return channel.closeCS();
        } else {
          throw new GrpcClientCloseException();
        }
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return channel.closedCS();
      }

      /**
       * The same client instance decorated to add the given key and value to the metadata of any request issued.
       */
      public OrderServiceClient addRequestHeader(String key, String value) {
        return new DefaultOrderServiceClient(
          channel,
          isChannelOwned,
          settings,
          options,
          mat,
          ec,
          defaultMetadata.addEntry(key, value));
      }
  }

   /**
    * The same client instance decorated to add the given key and value to the metadata of any request issued.
    */
   public OrderServiceClient addRequestHeader(String key, String value) {
     // default implementation ignoring header for source compatibility
     return this;
   }

}



